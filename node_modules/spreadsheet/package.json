{
  "name": "spreadsheet",
  "description": "A CommonJS module for reading a Google Spreadsheet.",
  "homepage": "http://github.com/publicclass/spreadsheet",
  "version": "0.3.0",
  "author": {
    "name": "Robert SkÃ¶ld",
    "email": "robert@publicclass.se"
  },
  "dependencies": {
    "xml2js-expat": "~ 0.2.0",
    "open-uri": "~ 0.3.3"
  },
  "main": "./lib/spreadsheet",
  "keywords": [
    "google",
    "spreadsheets",
    "gdata"
  ],
  "scripts": {
    "test": "expresso test/test.js"
  },
  "engines": {
    "node": ">= 0.2.0"
  },
  "readme": "# Spreadsheet\n\n  A CommonJS module for reading Google Spreadsheets.\n\n\n## Install\n\n  It's available on npm, so a simple `npm install spreadsheet` should be enough.\n\n\n## Usage\n\n\n\tvar Spreadsheet = require(\"spreadsheet\");\n\t\n\t// Instantiate a spreadsheet using the key directly.\n\tvar sheet = new Spreadsheet(\"mykey\");\n\t\n\t// Or just let the module extract it from an URL.\n\tvar sheet = Spreadsheet.fromURL(\"http://shared...\")\n\t\n\t// Load the worksheets, callback will be called for each worksheet\n\tsheet.worksheets(function(err,ws){\n\t\t// Each worksheet allows you to go through each row.\n\t\tws.eachRow(function(err,row,meta){\n\t\t\t// `row` is an object with all the fields of that row.\n\t\t\t// `meta` is an object like {index: 1, total: 2, id: \"https://...\", update: Date()}\n\t\t})\n\t\t\n\t\t// Or each cell.\n\t\tws.eachCell(function(err,cell,meta){\n\t\t\t// `cell` is an object like {row: 1, col: 1, value: \"Hello!\"}\n\t\t\t// `meta` is an object like {index: 1, total: 2, id: \"https://...\", update: Date()}\n\t\t})\n\t})\n\t\n\t// You can also work with just one worksheet by page number\n\tsheet.worksheet(1,function(err,ws){\n\t\t// Do stuff...\n\t})\n\t// Or worksheet id.\n\tsheet.worksheet(\"od6\",function(err,ws){\n\t\t// Do stuff...\n\t})\n\t\n\t\n## History\n\n### 0.3.0\n\n* [Feature] Changed to `open-uri` instead of `request`.\n* [Feature] Updated xml2js to 0.2.0.\n\n### 0.2.1\n\n* [Bug] Fixes for NPM 0.3+\n\n### 0.2.0\n\n* [Feature] Access row and cells directly by their IDs or URL through `Worksheet#cell(id,fn)`, `Worksheet#row(id,fn)` or using `Spreadsheet.fromURL(meta.id)` (meta.id is the meta you get in an `Worksheet#eachRow`- or `Worksheet.eachCell`-callback)\n\n### 0.1.2\n\n* [Feature] Error message when no rows were found.\n* [Bug] Fixed an issue with the NPM package. It couldn't find the library when installed through NPM.\n\n### 0.1.1\n\n* [Feature] Documentation\n\n### 0.1.0\n\n* Initial Google Spreadsheet implementation.\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 Robert Sk&ouml;ld &lt;robert@publicclass.se&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "README.md",
  "_id": "spreadsheet@0.3.0",
  "dist": {
    "shasum": "e0d8dba00d740b0529a3e35f2f712e9433ad97c8"
  },
  "_from": "spreadsheet@",
  "_resolved": "https://registry.npmjs.org/spreadsheet/-/spreadsheet-0.3.0.tgz"
}
